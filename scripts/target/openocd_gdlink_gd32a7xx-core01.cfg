# script for GD32A7XX Series

adapter driver cmsis-dap

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

set USE_CTI   1

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME gd32a7xx
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

# Allow overriding the Flash bank size
if { [info exists FLASH_SIZE] } {
	set _FLASH_SIZE $FLASH_SIZE
} else {
	# autodetect size
	set _FLASH_SIZE 0
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x6BA02477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
   jtag newtap $_CHIPNAME bs -irlen 5
}
set _TARGETNAME0 $_CHIPNAME.cpu0
target create $_TARGETNAME0 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 1
$_TARGETNAME0 configure -work-area-phys 0x24000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# flash size will be probed
set _FLASHNAME0 $_CHIPNAME.flash0
flash bank $_FLASHNAME0 gd32a7xx 0x08000000 $_FLASH_SIZE 0 0 $_TARGETNAME0


set _TARGETNAME1 $_CHIPNAME.cpu1
target create $_TARGETNAME1 cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 3

$_TARGETNAME1 configure -work-area-phys 0x24000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# flash size will be probed
set _FLASHNAME1 $_CHIPNAME.flash1
flash bank $_FLASHNAME1 gd32a7xx 0x08000000 $_FLASH_SIZE 0 0 $_TARGETNAME1


# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
adapter speed 1000

adapter srst delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}

reset_config srst_nogate

init

#configure CTI 
if { [info exists USE_CTI] } {
	set $_CHIPNAME.USE_CTI $USE_CTI
	unset USE_CTI
} else {
	set $_CHIPNAME.USE_CTI 0
}

# get _CHIPNAME from current target
proc gd32a7xx_get_chipname {} {
	set t [target current]
	set sep [string last "." $t]
	if {$sep == -1} {
		return $t
	}
	return [string range $t 0 [expr {$sep - 1}]]
}

if {[set $_CHIPNAME.USE_CTI]} {
	# create CTI instances for both cores
	cti create $_CHIPNAME.cti0 -dap $_CHIPNAME.dap -ap-num 1 -baseaddr 0xE0042000
	cti create $_CHIPNAME.cti1 -dap $_CHIPNAME.dap -ap-num 3 -baseaddr 0xE0042000

	$_CHIPNAME.cpu0 configure -event halted { gd32a7xx_cti_prepare_restart_all }
	$_CHIPNAME.cpu1 configure -event halted { gd32a7xx_cti_prepare_restart_all }

	$_CHIPNAME.cpu0 configure -event debug-halted { gd32a7xx_cti_prepare_restart_all }
	$_CHIPNAME.cpu1 configure -event debug-halted { gd32a7xx_cti_prepare_restart_all }

	proc gd32a7xx_cti_start {} {
		set _CHIPNAME [gd32a7xx_get_chipname]

		# Configure Cores' CTIs to halt each other
		# TRIGIN0 (DBGTRIGGER) and TRIGOUT0 (EDBGRQ) at CTM_CHANNEL_0
		$_CHIPNAME.cti0 write INEN0 0x1
		$_CHIPNAME.cti1 write OUTEN0 0x2

		# enable CTIs
		$_CHIPNAME.cti0 enable on
		$_CHIPNAME.cti1 enable on
	}

	proc gd32a7xx_cti_stop {} {
		set _CHIPNAME [gd32a7xx_get_chipname]

		$_CHIPNAME.cti0 enable off
		$_CHIPNAME.cti1 enable off
	}

	proc gd32a7xx_cti_prepare_restart_all {} {
		gd32a7xx_cti_prepare_restart cti0
		gd32a7xx_cti_prepare_restart cti1
	}

	proc gd32a7xx_cti_prepare_restart {cti} {
		set _CHIPNAME [gd32a7xx_get_chipname]

		# Acknowlodge EDBGRQ at TRIGOUT0
		$_CHIPNAME.$cti write INACK 0x01
		$_CHIPNAME.$cti write INACK 0x00
	}
}

if {[set $_CHIPNAME.USE_CTI]} {
	gd32a7xx_cti_start
}

